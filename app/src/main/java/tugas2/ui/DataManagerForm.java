package tugas2.ui;

import tugas2.database.BukuDataSource;
import tugas2.models.Buku;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

public class DataManagerForm extends JFrame {
	// initialise the model
	private DefaultTableModel tableModel;
	private List<Book> bukuList;


	/**
	 * Creates new form java
	 */
	public DataManagerForm() {
		initComponents();
		initTableModel();
		loadBookData();
	}

	/**
	 * Shows an error dialog
	 *
	 * @param message error message
	 */
	private void showError(String message) {
		JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
	}

	/**
	 * Shows success dialog
	 *
	 * @param message success message
	 */
	private void showSuccess(String message) {
		JOptionPane.showMessageDialog(this, message, "Sukses", JOptionPane.INFORMATION_MESSAGE);
	}

	// initialise the table model that consists of 3 columns
	private void initTableModel() {
		String[] columns = new String[]{"ID Buku", "Judul", "Pengarang"};
		tableModel = new DefaultTableModel(columns, 0);
		bookTable.setModel(tableModel);
	}

	/**
	 * Add row to the table with the data from the `book` model
	 *
	 * @param book - the `Book` model
	 */
	private void addRowToTableFor(Book book) {
		tableModel.addRow(new Object[]{
			book.getBookID(),
			book.getBookTitle(),
			book.getBookAuthor(),
		});
	}

	/**
	 * Add multiple rows to the table at once
	 * Shorthand for loop and calling `addRowToTableFor`
	 *
	 * @param bookList - list of `Book`
	 */
	private void addMultipleRowsToTableFor(List<Book> bookList) {
		for (Book buku : bookList) {
			addRowToTableFor(buku);
		}
	}

	/**
	 * Load the data from the database into the table
	 */
	private void loadBookData() {
		BookDataSource datasource = new BookDataSource();

		if (tableModel.getRowCount() > 0) {
			tableModel.setRowCount(0);
		}

		try {
			bukuList = datasource.findAll();
			addMultipleRowsToTableFor(bukuList);
		} catch (SQLException e) {
			showError("Tidak dapat memuat data buku");
			e.printStackTrace();
		}
	}

	/**
	 * Opens the given window
	 */
	private void open(Window activity) {
		activity.setLocationRelativeTo(this);
		activity.setVisible(true);
		activity.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent e) {
				super.windowClosed(e); //To change body of generated methods, choose Tools | Templates.
				loadBookData();
			}
		});
	}

	/**
	 * Opens the form popup
	 */
	private void openAddBookActivity() {
		BookActivityForm activity = new BookActivityForm();
		activity.setTitle("Tambah Data Buku");
		open(activity);
	}

	/**
	 * Opens the update form.
	 * It's just a form with initial data
	 */
	private void openUpdateBookActivity() {
		int selectedRow = bookTable.getSelectedRow();
		if (selectedRow < 0) {
			showError("Tidak ada data buku terpilih dalam tabel");
			return;
		}

		Book selectedBuku = bukuList.get(selectedRow);
		BookActivityForm activity = new BookActivityForm();
		activity.setTitle("Update Data Buku");
		activity.setBook(selectedBuku);
		open(activity);
	}

	/**
	 * Deletes the selected row
	 */
	private void deleteBook() {
		int selectedRow = bookTable.getSelectedRow();
		if (selectedRow < 0) {
			showError("Tidak ada data buku terpilih dalam tabel");
			return;
		}

		Book selectedBook = bukuList.get(selectedRow);
		int confirm = JOptionPane.showConfirmDialog(this, "Yakin Hapus"+selectedBook.getBookTitle()+" ?");
		if (confirm == JOptionPane.YES_OPTION) {
			BookDataSource datasource = new BookDataSource();
			try {
				datasource.delete(selectedBook);
				tableModel.removeRow(selectedRow);
				bukuList.remove(selectedBook);
				showSuccess("Data buku berhasil dihapus");
			} catch (SQLException e) {
				showSuccess("Data buku gagal dihapus");
				e.printStackTrace();
			}
		}
	}


	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		windowTitle = new javax.swing.JLabel();
		closeButton = new javax.swing.JButton();
		deleteButton = new javax.swing.JButton();
		updateButton = new javax.swing.JButton();
		addButton = new javax.swing.JButton();
		dataScrollPane = new javax.swing.JScrollPane();
		bookTable = new javax.swing.JTable();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Data Manager Buku");

		windowTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
		windowTitle.setText("Data Manager Buku");

		closeButton.setText("Tutup");
		closeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				closeButtonActionPerformed(evt);
			}
		});

		deleteButton.setText("Hapus");
		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}
		});

		updateButton.setText("Update");
		updateButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				updateButtonActionPerformed(evt);
			}
		});

		addButton.setText("Tambah");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt);
			}
		});

		dataScrollPane.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

		bookTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
		bookTable.setModel(new javax.swing.table.DefaultTableModel(
			new Object [][] {
				{null, null, null, null},
				{null, null, null, null},
				{null, null, null, null},
				{null, null, null, null}
			},
			new String [] {
				"Title 1", "Title 2", "Title 3", "Title 4"
			}
		));
		dataScrollPane.setViewportView(bookTable);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
			layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
				.addGap(14, 14, 14)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
					.addGroup(layout.createSequentialGroup()
						.addComponent(windowTitle)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
						.addComponent(addButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(updateButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(deleteButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(closeButton))
					.addComponent(dataScrollPane))
				.addGap(18, 18, 18))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(layout.createSequentialGroup()
				.addGap(15, 15, 15)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(windowTitle))
				.addGap(18, 18, 18)
				.addComponent(dataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addContainerGap(16, Short.MAX_VALUE))
		);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
		System.exit(0);
	}//GEN-LAST:event_closeButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		deleteBook();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
		openUpdateBookActivity();
	}//GEN-LAST:event_updateButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
		openAddBookActivity();
	}//GEN-LAST:event_addButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DataManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DataManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DataManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DataManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DataManagerForm().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addButton;
	private javax.swing.JButton closeButton;
	private javax.swing.JScrollPane dataScrollPane;
	private javax.swing.JButton deleteButton;
	private javax.swing.JLabel windowTitle;
	private javax.swing.JTable bookTable;
	private javax.swing.JButton updateButton;
	// End of variables declaration//GEN-END:variables
}
